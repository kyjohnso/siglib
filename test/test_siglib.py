#!/usr/bin/env pytest
import numpy as np
import pytest
import siglib as sl

@pytest.mark.parametrize(
    "x,frame_length,frame_step,pad,pad_value,expected",
    (
        (np.arange(10), 5, 5, True, 0j, np.arange(10, dtype=np.complex).reshape(2, 5)),
        (np.arange(10), 5, 5, False, 0j, np.arange(10, dtype=np.complex).reshape(2, 5)),
    ),
)
def test_frame(x, frame_length, frame_step, pad, pad_value, expected):
    result = sl.frame(x, frame_length, frame_step, pad=pad, pad_value=pad_value)
    np.testing.assert_equal(result, expected)


@pytest.mark.parametrize(
    "x,ntaps,expected",
    (
        (np.zeros(10), 5, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        (np.arange(10), 5, [4, 4, 4, 4, 4, 5, 6, 7, 8, 9]),
    ),
)
def test_closing(x, ntaps, expected):
    result = sl.closing(x, ntaps)
    expected = np.array(expected, dtype=np.complex)
    np.testing.assert_equal(result, expected)


@pytest.mark.parametrize(
    "x,ntaps,expected",
    (
        (np.zeros(10), 5, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        (np.arange(10), 5, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),
    ),
)
def test_opening(x, ntaps, expected):
    result = sl.opening(x, ntaps)
    expected = np.array(expected, dtype=np.complex)
    np.testing.assert_equal(result, expected)


@pytest.mark.parametrize(
    "x,idx,ntaps,expected",
    ((np.arange(10 ** 2), np.array([45.567]), 5, [44.96565413]),),
)
def test_resample(x, idx, ntaps, expected):
    result = sl.resample(x, idx, ntaps)
    np.testing.assert_allclose(result, expected, rtol=1e-9)


@pytest.mark.parametrize(
    "x,delay,pad,pad_value,expected",
    (
        (
            [1 + 3j, 4 + 2j, 5 + 6j, 1 + 0j],
            1,
            True,
            1 + 0j,
            [10 - 10j, 32 + 14j, 5.0 - 6j, 1.0 + 0j],
        ),
        (
            [1 + 3j, 4 + 2j, 5 + 6j, 1 + 0j],
            1,
            False,
            1 + 0j,
            [10 - 10j, 32 + 14j, 5.0 - 6j],
        ),
    ),
)
def test_dcm(x, delay, pad, pad_value, expected):
    x = np.array(x)
    result = sl.dcm(x, delay, pad=pad, pad_value=pad_value)
    expected = np.array(expected)
    np.testing.assert_equal(result, expected)


@pytest.mark.parametrize(
    "x,H,step,expected",
    (
        (
            [
                0.0 + 3.0j,
                -4.0 + 2.0j,
                -4.0 + 1.0j,
                -5.0 + 2.0j,
                -4.0 - 3.0j,
                2.0 + 1.0j,
                -1.0 - 2.0j,
                3.0 + 3.0j,
                -3.0 - 1.0j,
                -3.0 + 2.0j,
                -4.0 + 0.0j,
                -4.0 - 4.0j,
                -3.0 - 4.0j,
                -4.0 - 3.0j,
                -4.0 + 3.0j,
                -3.0 + 4.0j,
                -4.0 - 1.0j,
                -5.0 + 0.0j,
                4.0 + 2.0j,
                2.0 - 3.0j,
            ],
            [
                -8.0 + 7.0j,
                -4.70710678 + 8.94974747j,
                -1.0 + 8.0j,
                0.94974747 + 4.70710678j,
                0.0 + 1.0j,
                -3.29289322 - 0.94974747j,
                -7.0 + 0.0j,
                -8.94974747 + 3.29289322j,
            ],
            7,
            [
                [
                    -12.0 - 12.0j,
                    -1.0 - 36.0j,
                    22.0 - 40.0j,
                    25.0 - 44.0j,
                    42.0 - 27.0j,
                    13.0 + 4.0j,
                    1.0 + 6.0j,
                    -14.0 + 5.0j,
                    -5.0 - 11.0j,
                    19.0 - 25.0j,
                    22.0 - 33.0j,
                    48.0 - 12.0j,
                    56.0 + 8.0j,
                    52.0 + 3.0j,
                    29.0 - 28.0j,
                    3.0 - 52.0j,
                    20.0 - 37.0j,
                    39.0 - 28.0j,
                    -4.0 - 7.0j,
                    -18.0 + 24.0j,
                    1.0 + 18.0j,
                ]
            ],
        ),
        (
            [
                0.0 - 5.0j,
                2.0 - 4.0j,
                4.0 - 1.0j,
                -4.0 - 2.0j,
                2.0 + 0.0j,
                2.0 + 0.0j,
                0.0 - 5.0j,
                0.0 - 1.0j,
                -2.0 + 1.0j,
                -4.0 - 2.0j,
                0.0 + 2.0j,
                -5.0 - 5.0j,
                -5.0 - 1.0j,
                -2.0 + 1.0j,
                0.0 - 1.0j,
                3.0 + 4.0j,
                0.0 - 2.0j,
                1.0 + 0.0j,
                -1.0 - 2.0j,
                3.0 + 3.0j,
            ],
            [
                -6.0 + 6.0j,
                -3.29289322 + 6.53553391j,
                -1.0 + 5.0j,
                -0.46446609 + 2.29289322j,
                -2.0 + 0.0j,
                -4.70710678 - 0.53553391j,
                -7.0 + 1.0j,
                -7.53553391 + 3.70710678j,
            ],
            7,
            [
                [
                    15.0 + 20.0j,
                    19.0 + 32.0j,
                    -5.0 + 30.0j,
                    17.0 + 10.0j,
                    6.0 - 2.0j,
                    -12.0 + 12.0j,
                    11.0 + 26.0j,
                    18.0 + 14.0j,
                    8.0 - 8.0j,
                    23.0 - 12.0j,
                    8.0 - 16.0j,
                    29.0 + 1.0j,
                    48.0 - 16.0j,
                    18.0 - 23.0j,
                    4.0 - 4.0j,
                    -21.0 - 5.0j,
                    -12.0 + 9.0j,
                    2.0 + 7.0j,
                    8.0 + 8.0j,
                    -13.0 - 2.0j,
                    -15.0 + 3.0j,
                ]
            ],
        ),
        (
            [
                -2.0 - 4.0j,
                4.0 - 4.0j,
                -1.0 - 1.0j,
                -5.0 - 1.0j,
                4.0 - 4.0j,
                1.0 - 4.0j,
                -5.0 + 3.0j,
                4.0 + 3.0j,
                3.0 - 3.0j,
                2.0 - 4.0j,
                4.0 - 5.0j,
                0.0 - 4.0j,
                2.0 + 1.0j,
                2.0 - 4.0j,
                4.0 + 1.0j,
                -5.0 - 3.0j,
                2.0 + 3.0j,
                4.0 + 4.0j,
                1.0 + 4.0j,
                -1.0 - 3.0j,
            ],
            [
                [
                    1.0 + 2.0j,
                    2.24264069 - 1.0j,
                    1.0 - 4.0j,
                    -2.0 - 5.24264069j,
                    -5.0 - 4.0j,
                    -6.24264069 - 1.0j,
                    -5.0 + 2.0j,
                    -2.0 + 3.24264069j,
                ],
                [
                    -4.0 + 6.0j,
                    -0.29289322 + 6.94974747j,
                    3.0 + 5.0j,
                    3.94974747 + 1.29289322j,
                    2.0 - 2.0j,
                    -1.70710678 - 2.94974747j,
                    -5.0 - 1.0j,
                    -5.94974747 + 2.70710678j,
                ],
            ],
            7,
            [
                [
                    3.55271368e-15 + 1.0000000e01j,
                    -6.00000000e00 - 1.4000000e01j,
                    2.50000000e01 + 3.0000000e00j,
                    9.00000000e00 + 1.0000000e00j,
                    -2.40000000e01 - 1.4000000e01j,
                    1.80000000e01 + 7.0000000e00j,
                    2.80000000e01 - 1.0000000e01j,
                    -2.90000000e01 - 1.6000000e01j,
                    -6.00000000e00 + 2.4000000e01j,
                    1.00000000e01 + 6.0000000e00j,
                    5.00000000e00 + 0.0000000e00j,
                    2.30000000e01 + 5.0000000e00j,
                    9.00000000e00 - 1.6000000e01j,
                    -5.00000000e00 + 1.5000000e01j,
                    1.10000000e01 - 1.2000000e01j,
                    1.60000000e01 + 2.6000000e01j,
                    -7.00000000e00 - 3.2000000e01j,
                    -7.00000000e00 + 3.0000000e00j,
                    2.00000000e00 + 1.5000000e01j,
                    -1.00000000e01 + 2.2000000e01j,
                    6.00000000e00 - 1.2000000e01j,
                ],
                [
                    1.00000000e01 - 4.4408921e-16j,
                    2.60000000e01 + 1.6000000e01j,
                    7.00000000e00 + 2.7000000e01j,
                    1.40000000e01 - 1.0000000e01j,
                    2.30000000e01 - 5.0000000e00j,
                    1.10000000e01 + 3.4000000e01j,
                    1.20000000e01 + 3.0000000e00j,
                    -7.00000000e00 - 2.4000000e01j,
                    -2.10000000e01 + 1.6000000e01j,
                    9.00000000e00 + 2.9000000e01j,
                    1.60000000e01 + 3.3000000e01j,
                    1.60000000e01 + 3.5000000e01j,
                    1.20000000e01 + 1.5000000e01j,
                    -4.00000000e00 + 1.3000000e01j,
                    4.00000000e00 + 2.7000000e01j,
                    -5.00000000e00 + 6.0000000e00j,
                    1.90000000e01 - 1.0000000e01j,
                    -3.00000000e01 + 3.0000000e00j,
                    -3.70000000e01 + 2.0000000e00j,
                    -1.20000000e01 - 7.0000000e00j,
                    1.50000000e01 + 5.0000000e00j,
                ],
            ],
        ),
    ),
)
def test_overlapsave(x, H, step, expected):
    result = sl.overlapsave(np.array(x), np.array(H), step)
    expected = np.array(expected)
    np.testing.assert_almost_equal(result, expected)


@pytest.mark.parametrize(
    "N,expected",
    (
        (4, [0.08, 0.77, 0.77, 0.08],),
        (5, [0.08, 0.54, 1.0, 0.54, 0.08],),
        (
            99,
            [
                0.08,
                0.08094512,
                0.08377659,
                0.08848279,
                0.09504436,
                0.10343436,
                0.11361829,
                0.12555432,
                0.1391934,
                0.15447947,
                0.17134973,
                0.18973486,
                0.2095593,
                0.23074159,
                0.25319469,
                0.27682634,
                0.30153942,
                0.32723239,
                0.35379966,
                0.38113207,
                0.40911731,
                0.43764037,
                0.46658405,
                0.49582941,
                0.52525627,
                0.55474373,
                0.58417059,
                0.61341595,
                0.64235963,
                0.67088269,
                0.69886793,
                0.72620034,
                0.75276761,
                0.77846058,
                0.80317366,
                0.82680531,
                0.84925841,
                0.8704407,
                0.89026514,
                0.90865027,
                0.92552053,
                0.9408066,
                0.95444568,
                0.96638171,
                0.97656564,
                0.98495564,
                0.99151721,
                0.99622341,
                0.99905488,
                1.0,
                0.99905488,
                0.99622341,
                0.99151721,
                0.98495564,
                0.97656564,
                0.96638171,
                0.95444568,
                0.9408066,
                0.92552053,
                0.90865027,
                0.89026514,
                0.8704407,
                0.84925841,
                0.82680531,
                0.80317366,
                0.77846058,
                0.75276761,
                0.72620034,
                0.69886793,
                0.67088269,
                0.64235963,
                0.61341595,
                0.58417059,
                0.55474373,
                0.52525627,
                0.49582941,
                0.46658405,
                0.43764037,
                0.40911731,
                0.38113207,
                0.35379966,
                0.32723239,
                0.30153942,
                0.27682634,
                0.25319469,
                0.23074159,
                0.2095593,
                0.18973486,
                0.17134973,
                0.15447947,
                0.1391934,
                0.12555432,
                0.11361829,
                0.10343436,
                0.09504436,
                0.08848279,
                0.08377659,
                0.08094512,
                0.08,
            ],
        ),
    ),
)
def test_hamming(N, expected):
    result = sl.hamming(N)
    expected = np.array(expected)
    np.testing.assert_almost_equal(result, expected)
